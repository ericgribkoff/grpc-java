# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import test_pb2 as test__pb2


class TestServiceStub(object):
  """A simple service to test the various types of RPCs and experiment with
  performance with various types of payload.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.EmptyCall = channel.unary_unary(
        '/grpc.testing.TestService/EmptyCall',
        request_serializer=test__pb2.Empty.SerializeToString,
        response_deserializer=test__pb2.Empty.FromString,
        )
    self.UnaryCall = channel.unary_unary(
        '/grpc.testing.TestService/UnaryCall',
        request_serializer=test__pb2.SimpleRequest.SerializeToString,
        response_deserializer=test__pb2.SimpleResponse.FromString,
        )
    self.StreamingOutputCall = channel.unary_stream(
        '/grpc.testing.TestService/StreamingOutputCall',
        request_serializer=test__pb2.StreamingOutputCallRequest.SerializeToString,
        response_deserializer=test__pb2.StreamingOutputCallResponse.FromString,
        )
    self.StreamingInputCall = channel.stream_unary(
        '/grpc.testing.TestService/StreamingInputCall',
        request_serializer=test__pb2.StreamingInputCallRequest.SerializeToString,
        response_deserializer=test__pb2.StreamingInputCallResponse.FromString,
        )
    self.FullDuplexCall = channel.stream_stream(
        '/grpc.testing.TestService/FullDuplexCall',
        request_serializer=test__pb2.StreamingOutputCallRequest.SerializeToString,
        response_deserializer=test__pb2.StreamingOutputCallResponse.FromString,
        )
    self.HalfDuplexCall = channel.stream_stream(
        '/grpc.testing.TestService/HalfDuplexCall',
        request_serializer=test__pb2.StreamingOutputCallRequest.SerializeToString,
        response_deserializer=test__pb2.StreamingOutputCallResponse.FromString,
        )


class TestServiceServicer(object):
  """A simple service to test the various types of RPCs and experiment with
  performance with various types of payload.
  """

  def EmptyCall(self, request, context):
    """One empty request followed by one empty response.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UnaryCall(self, request, context):
    """One request followed by one response.
    The server returns the client payload as-is.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamingOutputCall(self, request, context):
    """One request followed by a sequence of responses (streamed download).
    The server returns the payload with client desired type and sizes.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamingInputCall(self, request_iterator, context):
    """A sequence of requests followed by one response (streamed upload).
    The server returns the aggregated size of client payload as the result.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FullDuplexCall(self, request_iterator, context):
    """A sequence of requests with each request served by the server immediately.
    As one request could lead to multiple responses, this interface
    demonstrates the idea of full duplexing.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HalfDuplexCall(self, request_iterator, context):
    """A sequence of requests followed by a sequence of responses.
    The server buffers all the client requests and then serves them in order. A
    stream of responses are returned to the client when the server starts with
    first request.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_TestServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'EmptyCall': grpc.unary_unary_rpc_method_handler(
          servicer.EmptyCall,
          request_deserializer=test__pb2.Empty.FromString,
          response_serializer=test__pb2.Empty.SerializeToString,
      ),
      'UnaryCall': grpc.unary_unary_rpc_method_handler(
          servicer.UnaryCall,
          request_deserializer=test__pb2.SimpleRequest.FromString,
          response_serializer=test__pb2.SimpleResponse.SerializeToString,
      ),
      'StreamingOutputCall': grpc.unary_stream_rpc_method_handler(
          servicer.StreamingOutputCall,
          request_deserializer=test__pb2.StreamingOutputCallRequest.FromString,
          response_serializer=test__pb2.StreamingOutputCallResponse.SerializeToString,
      ),
      'StreamingInputCall': grpc.stream_unary_rpc_method_handler(
          servicer.StreamingInputCall,
          request_deserializer=test__pb2.StreamingInputCallRequest.FromString,
          response_serializer=test__pb2.StreamingInputCallResponse.SerializeToString,
      ),
      'FullDuplexCall': grpc.stream_stream_rpc_method_handler(
          servicer.FullDuplexCall,
          request_deserializer=test__pb2.StreamingOutputCallRequest.FromString,
          response_serializer=test__pb2.StreamingOutputCallResponse.SerializeToString,
      ),
      'HalfDuplexCall': grpc.stream_stream_rpc_method_handler(
          servicer.HalfDuplexCall,
          request_deserializer=test__pb2.StreamingOutputCallRequest.FromString,
          response_serializer=test__pb2.StreamingOutputCallResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpc.testing.TestService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class UnimplementedServiceStub(object):
  """A simple service NOT implemented at servers so clients can test for
  that case.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.UnimplementedCall = channel.unary_unary(
        '/grpc.testing.UnimplementedService/UnimplementedCall',
        request_serializer=test__pb2.Empty.SerializeToString,
        response_deserializer=test__pb2.Empty.FromString,
        )


class UnimplementedServiceServicer(object):
  """A simple service NOT implemented at servers so clients can test for
  that case.
  """

  def UnimplementedCall(self, request, context):
    """A call that no server should implement
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_UnimplementedServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'UnimplementedCall': grpc.unary_unary_rpc_method_handler(
          servicer.UnimplementedCall,
          request_deserializer=test__pb2.Empty.FromString,
          response_serializer=test__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpc.testing.UnimplementedService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))


class LoadBalancerStatsServiceStub(object):
  """A service used to obtain stats for verifying LB behavior.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetClientStats = channel.unary_unary(
        '/grpc.testing.LoadBalancerStatsService/GetClientStats',
        request_serializer=test__pb2.LoadBalancerStatsRequest.SerializeToString,
        response_deserializer=test__pb2.LoadBalancerStatsResponse.FromString,
        )


class LoadBalancerStatsServiceServicer(object):
  """A service used to obtain stats for verifying LB behavior.
  """

  def GetClientStats(self, request, context):
    """Gets the backend distribution for RPCs sent by a test client.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LoadBalancerStatsServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetClientStats': grpc.unary_unary_rpc_method_handler(
          servicer.GetClientStats,
          request_deserializer=test__pb2.LoadBalancerStatsRequest.FromString,
          response_serializer=test__pb2.LoadBalancerStatsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'grpc.testing.LoadBalancerStatsService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
